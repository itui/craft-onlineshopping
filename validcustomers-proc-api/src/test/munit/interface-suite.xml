<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="interface-suite.xml" />
	<munit:test name="validcustomers-proc-api-main-test" doc:id="f1aa834b-c663-4965-8e50-d3d3ed9e005f" >
		<munit:behavior >
			<munit-tools:spy doc:name="Spy APIkit Router" doc:id="bf56a73c-4daa-4d49-b990-868d7c71de7e" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="47fe626e-0e94-4116-ba95-5d9a8c85aefe" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="0d6abd53-ca9d-4928-abc5-fbc402368184" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import validcustomersprocapimaintest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="e55b0535-a9d5-4c01-af68-7af4358bda4a" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import validcustomersprocapimaintest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="8a64c338-4c7e-46a9-b68c-b992288a2eb1" >
				<munit:payload value="#[readUrl('classpath://validcustomersprocapimaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://validcustomersprocapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to validcustomers-proc-api-main" doc:id="ea448fa3-c3f0-4538-a89d-6b42841252e6" name="validcustomers-proc-api-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c3ddc7db-6dd8-4c89-b2c6-78ec39cf1f61" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import validcustomersprocapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify APIkit Router" doc:id="92de3910-b1e0-43e2-af1f-81c919a876b5" processor="apikit:router" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="47fe626e-0e94-4116-ba95-5d9a8c85aefe" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\validcustomer:validcustomers-proc-api-config-test" doc:id="cf952e2b-732c-4aa0-92b7-c59de3944b6d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="1b9ce079-e0ff-446a-8b14-e04e7a896e87" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c799b28f-76c3-4708-9c08-1d84fafd82f7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getvalidcustomervalidcustomersprocapiconfigtest\mock_payload1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeadersMapName" value="#[readUrl('classpath://getvalidcustomervalidcustomersprocapiconfigtest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="cf848ccd-da3d-421c-b574-85112a9a0ad4" >
				<munit:payload value="#[readUrl('classpath://getvalidcustomervalidcustomersprocapiconfigtest\set-event_payload1.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getvalidcustomervalidcustomersprocapiconfigtest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeadersMapName" value="#[readUrl('classpath://getvalidcustomervalidcustomersprocapiconfigtest\set-event_variable_1.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\validcustomer:validcustomers-proc-api-config" doc:id="a9d812ba-5f89-4cf3-acc8-42459fe73a54" name="get:\validcustomer:validcustomers-proc-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="678f8010-c2a2-42a6-bf00-d4feda3ba313" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getvalidcustomervalidcustomersprocapiconfigtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
